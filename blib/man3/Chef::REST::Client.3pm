.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Chef::REST::Client 3"
.TH Chef::REST::Client 3 "2014-05-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chef::REST::Client
.SH "VERSION"
.IX Header "VERSION"
1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Chef::REST::Client;
.PP
.Vb 6
\&        my $obj = new Chef::REST::Client
\&                                ( \*(Aqchef_client_name\*(Aq => $chef_client_name )
\&        $obj\->name( $chef_client_name );
\&        $obj\->roles(\*(Aqvagrant\*(Aq)\->details;
\&        $obj\->roles(\*(Aqvagrant\*(Aq,\*(Aqenvironments\*(Aq)\->details
\&        $obj\->roles\->list;
\&   
\&        $obj\->search( \*(Aqsecrets\*(Aq , {  q => \*(Aqid:centrify\*(Aq, rows => 1 } )\->details
\&   
\&        $obj\->environments(<env_name>,\*(Aqcookbooks\*(Aq , <cookbook_name>)\->details;
\&
\&        $obj\->environments(<env_name>,\*(Aqcookbooks_versions\*(Aq
\&                                ,{ \*(Aqmethod\*(Aq => \*(Aqpost\*(Aq
\&                                , \*(Aqdata\*(Aq => { \*(Aqrunlist\*(Aq => [ \*(Aqms\-scribe\*(Aq] }
\&                                  }
\&                     );
\&        $obj\->roles(<role_name>)\->details\->override_attributes;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the interface to the Chef server api methods listed on opscode documentation 
opscode Chef Api <http://docs.opscode.com/api_chef_server.html>
currently it provides implementation for only \s-1GET\s0 methods
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "role( $role )"
.el .SS "role( \f(CW$role\fP )"
.IX Subsection "role( $role )"
returns new Chef::REST::Client::role object
used by other classes
.ie n .SS "roles ( @roles )"
.el .SS "roles ( \f(CW@roles\fP )"
.IX Subsection "roles ( @roles )"
makes a \s-1GET\s0 request to the chef server for all the \f(CW@roles\fR and returns and Chef::REST::Client::roles object.
you can directly get details for all the roles as \f(CW$obj\fR\->role( 'role1', 'role2' )\->details;
.PP
this inturn will return Chef::REST::Client::role
.IP "/roles" 4
.IX Item "/roles"
.Vb 1
\&        $obj\->roles\->list
.Ve
.IP "/roles/<role_name>" 4
.IX Item "/roles/<role_name>"
.Vb 1
\&        $obj\->roles(<role_name>)\->details
\&
\&        $obj\->roles(<role_name>)\->details\->run_list;
\&
\&        $obj\->roles(<role_name>)\->details\->override_attributes;
.Ve
.SS "runlist ( @$recipes )"
.IX Subsection "runlist ( @$recipes )"
returns new Chef::REST::Client::runlist object. it takes a list of recipies as parameter.
used by other classes
.SS "sandboxes"
.IX Subsection "sandboxes"
returns new Chef::REST::Client::sandboxes object. \f(CW$obj\fR\->sandboxes\->list;
.IP "/sandboxes" 4
.IX Item "/sandboxes"
.Vb 1
\&        $obj\->sandboxes\->list
.Ve
.IP "/sandboxes/<id>" 4
.IX Item "/sandboxes/<id>"
.Vb 1
\&        $obj\->sandboxes(<id>)\->details
.Ve
.SS "search"
.IX Subsection "search"
returns new Chef::REST::Client::search
.IP "/search" 4
.IX Item "/search"
.Vb 1
\&        $obj\->search\->listen
.Ve
.IP "/search/<index>" 4
.IX Item "/search/<index>"
.Vb 1
\&        $obj\->search(<index>)\->details
.Ve
.IP "/search/ query id:centrify and get rows 1" 4
.IX Item "/search/ query id:centrify and get rows 1"
.Vb 1
\&        $obj\->search( \*(Aqsecrets\*(Aq , {  q => \*(Aqid:centrify\*(Aq, rows => 1 } )\->details
.Ve
.SS "recipe"
.IX Subsection "recipe"
returns new Chef::REST::Client::recipe object. used by other classes
.SS "principals"
.IX Subsection "principals"
returns new Chef::REST::Client::principals object. \f(CW$obj\fR\->principals\->details;
.IP "/principals" 4
.IX Item "/principals"
.Vb 1
\&        $obj\->principals\->list
.Ve
.IP "/principals/<name>" 4
.IX Item "/principals/<name>"
.Vb 1
\&        $obj\->principals(<name>)\->details
.Ve
.SS "node"
.IX Subsection "node"
returns new Chef::REST::Client::node object. \f(CW$obj\fR\->node\->details;
used by other classes
.SS "nodes"
.IX Subsection "nodes"
returns new Chef::REST::Client::nodes object. \f(CW$obj\fR\->nodes\->list;
.IP "/nodes" 4
.IX Item "/nodes"
.Vb 1
\&        $obj\->nodes\->listen
.Ve
.IP "/nodes/<node_name>" 4
.IX Item "/nodes/<node_name>"
.Vb 1
\&        $obj\->nodes(<node_name>)\->details
.Ve
.SS "envrunlist"
.IX Subsection "envrunlist"
returns new Chef::REST::Client::envrunnlist object. used by other classes
.SS "environment"
.IX Subsection "environment"
returns new Chef::REST::Client::environment object. used by other classes
.SS "environments"
.IX Subsection "environments"
returns new Chef::REST::Client::environments object.
.IP "/environment/<env_name>" 4
.IX Item "/environment/<env_name>"
.Vb 1
\&        $obj\->environments(<env_name>)\->details;
.Ve
.IP "/environment/<env_name>/cookbooks/<cookbook_name>" 4
.IX Item "/environment/<env_name>/cookbooks/<cookbook_name>"
.Vb 1
\&        $obj\->environments(<env_name>,\*(Aqcookbooks\*(Aq , <cookbook_name>)\->details;
.Ve
.IP "/environment/<env_name>/cookbooks" 4
.IX Item "/environment/<env_name>/cookbooks"
.Vb 1
\&        $obj\->environments(<env_name>,\*(Aqcookbooks\*(Aq)
.Ve
.IP "\s-1POST\s0 /environments/<env_name>/cookbooks_versions" 4
.IX Item "POST /environments/<env_name>/cookbooks_versions"
.Vb 5
\&        $obj\->environments(<env_name>,\*(Aqcookbooks_versions\*(Aq
\&                                    ,{ \*(Aqmethod\*(Aq => \*(Aqpost\*(Aq
\&                                   , \*(Aqdata\*(Aq => { \*(Aqrunlist\*(Aq => [ \*(Aqms\-scribe\*(Aq] }
\&                                }
\&                       );
.Ve
.SS "databag"
.IX Subsection "databag"
returns new Chef::REST::Client::databag object.
.SS "data"
.IX Subsection "data"
returns new Chef::REST::Client::data object.
.IP "/data" 4
.IX Item "/data"
.Vb 1
\&        $obj\->data\->list
.Ve
.IP "/data/<var_name>" 4
.IX Item "/data/<var_name>"
.Vb 1
\&        $obj\->data( <var_name> )\->details
.Ve
.SS "cookbook"
.IX Subsection "cookbook"
returns new Chef::REST::Client::cookbook object.
.SS "cookbooks"
.IX Subsection "cookbooks"
returns new Chef::REST::Client::cookbooks object.
.IP "/cookbooks" 4
.IX Item "/cookbooks"
.Vb 1
\&        $obj\->cookbooks\->list
.Ve
.IP "/cookbooks/<cookbook_name>" 4
.IX Item "/cookbooks/<cookbook_name>"
.Vb 1
\&        $obj\->cookbooks(<cookbook_name>)\->details 
\&
\&        $obj\->cookbooks(<cookbook_name> , \*(Aq_latest\*(Aq )\->details\->recipes;
\&
\&        $obj\->cookbooks(<cookbook_name> , \*(Aq_latest\*(Aq )\->details\->attributes;
.Ve
.SS "cookbook_version"
.IX Subsection "cookbook_version"
returns new Chef::REST::Client::cookbook_version object.
used by other classes
.SS "cookbook_versions"
.IX Subsection "cookbook_versions"
returns new Chef::REST::Client::cookbook_versions object.
collection of Chef::REST::Client::cookbook_version
.SS "clients"
.IX Subsection "clients"
returns new Chef::REST::Client::clients object.
.IP "/clients" 4
.IX Item "/clients"
.Vb 1
\&        $obj\->clients\->list
.Ve
.IP "/clients/<client_name>/" 4
.IX Item "/clients/<client_name>/"
.Vb 1
\&        $obj\->clients(<client_name>)\->details
.Ve
.SS "attribute"
.IX Subsection "attribute"
returns new Chef::REST::Client::attribute object.
used by other classes to structure data
.SS "attributes"
.IX Subsection "attributes"
returns new Chef::REST::Client::attributes object.
collection of Chef::REST::Client::attribute
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
.SH "SUPPORT"
.IX Header "SUPPORT"
open a github ticket or email comments to Bhavin Patel <bpatel10@nyit.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This Software is free to use , licensed under : The Artisic License 2.0 (\s-1GPL\s0 Compatible)
