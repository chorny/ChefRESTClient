.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Chef::REST::Client::cookbook 3"
.TH Chef::REST::Client::cookbook 3 "2014-05-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chef::REST::Client::cookbook
.SH "VERSION"
.IX Header "VERSION"
1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
my \f(CW$obj\fR = new Chef::REST::Client::cookbook( 'name'       => \f(CW$cookbook_name\fR
                                          , 'url'        => \f(CW$cookbook_url\fR
                                          , 'versions'   => \f(CW$versions\fR
                                          , 'libraries'  => \f(CW$libraries\fR
                                          , 'providers'  => \f(CW$providers\fR
                                          , 'resources'  => \f(CW$resources\fR
                                          , 'root_files' => \f(CW$root_files\fR
                                          , 'version'    => \f(CW$cookbook_version\fR
                                          , 'templates'  => \f(CW$templates\fR
                                          , 'files'      => \f(CW$files\fR
                                          , 'attributes' => \f(CW$attributes\fR
                                          , 'recipes'    => \f(CW$recipes\fR
                                          , 'metadata'   => \f(CW$metadata\fR );
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
used internally by other classes like Chef::REST::Client::cookbooks
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructor"
.IX Subsection "Constructor"
returns new Chef::REST::Client::cookbook object
.ie n .SS "url( $url )"
.el .SS "url( \f(CW$url\fP )"
.IX Subsection "url( $url )"
set 'url' property value if speicfied else return previous value;
.ie n .SS "name( $name )"
.el .SS "name( \f(CW$name\fP )"
.IX Subsection "name( $name )"
set 'name' property value if speicfied else return previous value;
.ie n .SS "version( $version )"
.el .SS "version( \f(CW$version\fP )"
.IX Subsection "version( $version )"
set 'version' property value if speicfied else return previous value;
.ie n .SS "libraries( $libraries )"
.el .SS "libraries( \f(CW$libraries\fP )"
.IX Subsection "libraries( $libraries )"
set 'libraries' value if speicfied else return previous value;
.ie n .SS "providers( $providers )"
.el .SS "providers( \f(CW$providers\fP )"
.IX Subsection "providers( $providers )"
set 'providers' value if speicfied else return previous value;
.ie n .SS "resources( $resources )"
.el .SS "resources( \f(CW$resources\fP )"
.IX Subsection "resources( $resources )"
set 'resources' value if speicfied else return previous value;
.ie n .SS "root_files( $root_files )"
.el .SS "root_files( \f(CW$root_files\fP )"
.IX Subsection "root_files( $root_files )"
set 'root_files' value if speicfied else return previous value;
.ie n .SS "templates( $templates )"
.el .SS "templates( \f(CW$templates\fP )"
.IX Subsection "templates( $templates )"
set 'templates' value if speicfied else return previous value;
.ie n .SS "files( $files )"
.el .SS "files( \f(CW$files\fP )"
.IX Subsection "files( $files )"
set 'filess' value if speicfied else return previous value;
.ie n .SS "attributes( $attributes )"
.el .SS "attributes( \f(CW$attributes\fP )"
.IX Subsection "attributes( $attributes )"
\&\f(CW$attributes\fR is converted to Chef::REST::Client::attributes class and is assigned to 'attributes' property
returns values of 'attributes' property if no argument is given.
.ie n .SS "recipes( $recipes )"
.el .SS "recipes( \f(CW$recipes\fP )"
.IX Subsection "recipes( $recipes )"
set 'recipes' value if speicfied else return previous value;
.ie n .SS "metadata( $metadata )"
.el .SS "metadata( \f(CW$metadata\fP )"
.IX Subsection "metadata( $metadata )"
set 'metadata' value if speicfied else return previous value;
.ie n .SS "versions( $versions )"
.el .SS "versions( \f(CW$versions\fP )"
.IX Subsection "versions( $versions )"
set 'versions' value if speicfied else return previous value;
\&\f(CW$versions\fR is converted to Chef::REST::Client::coookbook_versions class
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
.SH "SUPPORT"
.IX Header "SUPPORT"
open a github ticket or email comments to Bhavin Patel <bpatel10@nyit.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This Software is free to use , licensed under : The Artisic License 2.0 (\s-1GPL\s0 Compatible)
